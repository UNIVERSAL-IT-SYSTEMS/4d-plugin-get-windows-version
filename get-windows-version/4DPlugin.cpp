/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : get-windows-version
 #	author : miyako
 #	2015/09/04
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#define kGetFileVersionInfo 1
#define kGetVersionInfoEx 0

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Windows

		case 1 :
			Windows_Is_WOW64(pResult, pParams);
			break;

		case 2 :
			Windows_Get_version(pResult, pParams);
			break;

	}
}

// ------------------------------------ Windows -----------------------------------

BOOL IsWow64()
{
    BOOL bIsWow64 = FALSE;
#if VERSIONWIN
    typedef BOOL(WINAPI *LPFN_ISWOW64PROCESS) (HANDLE, PBOOL);
    LPFN_ISWOW64PROCESS fnIsWow64Process;
    fnIsWow64Process = (LPFN_ISWOW64PROCESS)GetProcAddress(
        GetModuleHandle(TEXT("kernel32")), "IsWow64Process");

    if (NULL != fnIsWow64Process)
    {
        if (!fnIsWow64Process(GetCurrentProcess(), &bIsWow64))
        {
            bIsWow64 = TRUE;
        }
    }
#endif
    return bIsWow64;
}

void Windows_Is_WOW64(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT returnValue;

	returnValue.setIntValue(IsWow64());
	returnValue.setReturn(pResult);
}

BOOL getVersion(C_LONGINT &major, C_LONGINT &minor){
#if VERSIONWIN
    // https://msdn.microsoft.com/en-us/library/ms724833(v=vs.85).aspx
	OSVERSIONINFOEX versionInfo;
	ZeroMemory(&versionInfo, sizeof(OSVERSIONINFOEX));
	versionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);
    if(GetVersionEx((OSVERSIONINFO*)&versionInfo)){
        major.setIntValue(versionInfo.dwMajorVersion);
        minor.setIntValue(versionInfo.dwMinorVersion);
		return TRUE;
    }
#endif
    return FALSE;
}

BOOL getKernel32Version(C_LONGINT &major, C_LONGINT &minor){
#if VERSIONWIN
    TCHAR pszPath[MAX_PATH];
    GetSystemDirectory(pszPath, sizeof(pszPath));
    PathAppend(pszPath, L"kernel32.dll");
    DWORD dwSize = GetFileVersionInfoSize(pszPath, NULL);
    DWORD dwMajor, dwMinor;
    if (dwSize != 0)
    {
        BYTE *pbVersionInfo = new BYTE[dwSize];
        if (GetFileVersionInfo(pszPath, 0, dwSize, pbVersionInfo))
        {
            VS_FIXEDFILEINFO *pFileInfo = NULL;
			UINT puLenFileInfo = 0;
            if (VerQueryValue(pbVersionInfo, L"\\", (LPVOID*)&pFileInfo, &puLenFileInfo))
            {
                if (IsWow64() == TRUE) {
                    
                    dwMajor = pFileInfo->dwProductVersionMS >> 16 & 0xff; 
                    dwMinor = pFileInfo->dwProductVersionMS >> 0 & 0xff;
                    
                }else{
                    dwMajor = pFileInfo->dwProductVersionMS;
                    dwMinor = pFileInfo->dwProductVersionMS;
                }
                
                major.setIntValue(dwMajor);
                minor.setIntValue(dwMinor);
                return TRUE;
            }
        }
    }
#endif
    return FALSE;
}

// http://stackoverflow.com/questions/9817160/getversionex-under-windows-8

void setVersionString(C_TEXT &version, C_LONGINT &major, C_LONGINT &minor){

#if VERSIONWIN
	uint8_t buf[99];
	sprintf((char *)buf, "%i.%i", major.getIntValue(), minor.getIntValue());
	CUTF8String _version(buf);
    version.setUTF8String(&_version);
#endif
}

void Windows_Get_version(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_TEXT returnValue;
    C_LONGINT major, minor;
    
	Param1.fromParamAtIndex(pParams, 1);

	switch (Param1.getIntValue()) {
      case kGetFileVersionInfo:
        if(getKernel32Version(major, minor))
            setVersionString(returnValue, major, minor);
        break;
      default:
        if(getVersion(major, minor))
            setVersionString(returnValue, major, minor);
        break;
        break;
    }
    
	returnValue.setReturn(pResult);
}
